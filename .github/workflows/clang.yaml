name: Clang

on: [pull_request]

jobs:
    build:
        uses: ./.github/workflows/build.yaml

    file-changes:
      runs-on: ubuntu-latest
      outputs: 
        all: ${{ steps.changed-files.outputs.all }}
        # existing: ${{ steps.existing-files.outputs.EXISTING_FILES }}
        target: ${{ steps.existing-files.outputs.TARGET_FILES }}
      steps:
        - name: Check out repository
          uses: actions/checkout@v3
          with:
            submodules: recursive

        - name: Get changed files
          id: changed-files
          uses: jitterbit/get-changed-files@v1

        # - name: Get only existing files
        #   id: existing-files
        #   run: |
        #     existing_files=$(echo "${{ steps.changed-files.outputs.all }}" | xargs -I {} echo {} | grep -E '\.cpp|\.hpp|\.c|\.h' | tr '\n' ' ')
        #     echo "Existing files: $existing_files"
        #     { 
        #       echo 'EXISTING_FILES<<EOF'
        #       echo '$existing_files'
        #       echo EOF
        #     } >> "$GITHUB_OUTPUT"
        #   shell: bash

        - name: Get only cpp, hpp, c, and h files
          id: target-files
          run: |
            input_files=(${{ steps.changed-files.outputs.all }})
            echo "Input files: $input_files"
            target_files=()
            for f in "${input_files[@]}"; do
              echo "Checking file: $f"
              if [[ $f == *.cpp || $f == *.hpp ]]; then
                echo "File ending correct: $f"
                target_files+=("$f")
              else
                echo "File does not have correct ending: $f"
              fi
            done
            echo "Target files: $target_files"

            { 
              echo 'TARGET_FILES<<EOF'
              for f in "${target_files[@]}"; do
                echo "$f"
              done
              echo EOF
            } >> $GITHUB_OUTPUT
          
        - name: Print all files
          run: |
            echo ${{ steps.target-files.outputs.TARGET_FILES }}

    clang-tidy:
        uses: ./.github/workflows/clang-tidy.yaml
        needs: [build, file-changes]
        with:
            target_files: ${{ needs.file-changes.outputs.target }}
    
    clang-format:
        uses: ./.github/workflows/clang-format.yaml
        needs: [file-changes]
        with:
            target_files: ${{ needs.file-changes.outputs.target }}