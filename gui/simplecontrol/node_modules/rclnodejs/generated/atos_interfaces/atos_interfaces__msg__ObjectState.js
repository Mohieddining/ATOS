// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ObjectStateRefStruct = StructType({
  state: primitiveTypes.uint8,
});
const ObjectStateRefArray = ArrayType(ObjectStateRefStruct);
const ObjectStateRefStructArray = StructType({
  data: ObjectStateRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class ObjectStateWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new ObjectStateRefStruct(other._refObject.toObject());
      this._stateIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new ObjectStateRefStruct();
    this._stateIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new ObjectStateWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new ObjectStateArrayWrapper;
  }
  static get ArrayType() {
    return ObjectStateArrayWrapper;
  }
  static get refObjectArrayType() {
    return ObjectStateRefStructArray
  }
  static get refObjectType() {
    return ObjectStateRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._stateIntialized) {
        throw new TypeError('Invalid argument: state in ObjectState');
      }
    }
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._stateIntialized = true;
    this._refObject.state = refObject.state;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
  }
  static destoryRawROS(msg) {
    ObjectStateWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'atos_interfaces', subFolder: 'msg', interfaceName: 'ObjectState'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get state() {
    if (!this._stateIntialized) {
      return undefined;
    }
    return this._refObject.state;
  }
  set state(value) {
    this._stateIntialized = true;
    this._refObject.state = value;
  }
  copyRefObject(refObject) {
    this._refObject = new ObjectStateRefStruct(refObject.toObject());
    this._stateIntialized = true;
  }
  copy(other) {
    this._refObject = new ObjectStateRefStruct(other._refObject.toObject());
    this._stateIntialized = true;
  }
  static get classType() {
    return ObjectStateWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[{"type":"uint8","name":"STATE_UNKNOWN","value":0},{"type":"uint8","name":"STATE_INIT","value":1},{"type":"uint8","name":"STATE_ARMED","value":2},{"type":"uint8","name":"STATE_DISARMED","value":3},{"type":"uint8","name":"STATE_RUNNING","value":4},{"type":"uint8","name":"STATE_POSTRUN","value":5},{"type":"uint8","name":"STATE_REMOTE_CONTROL","value":6},{"type":"uint8","name":"STATE_ABORTING","value":7},{"type":"uint8","name":"STATE_PRE_ARMING","value":8},{"type":"uint8","name":"STATE_PRE_RUNNING","value":9}],"fields":[{"name":"state","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"uint8","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"atos_interfaces","type":"ObjectState","stringUpperBound":null,"isPrimitiveType":false},"msgName":"ObjectState"};
  }
  hasMember(name) {
    let memberNames = ["state"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class ObjectStateArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof ObjectStateWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new ObjectStateWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ObjectStateArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to ObjectStateArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new ObjectStateRefArray(size);
    this._refObject = new ObjectStateRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new ObjectStateWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof ObjectStateArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "ObjectStateArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      ObjectStateWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return ObjectStateWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return ObjectStateArrayWrapper;
  }
}
// Define constants (10 in total)
Object.defineProperty(ObjectStateWrapper, "STATE_UNKNOWN", {value: 0, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_INIT", {value: 1, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_ARMED", {value: 2, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_DISARMED", {value: 3, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_RUNNING", {value: 4, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_POSTRUN", {value: 5, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_REMOTE_CONTROL", {value: 6, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_ABORTING", {value: 7, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_PRE_ARMING", {value: 8, writable: false, enumerable: true, configurable: true});
Object.defineProperty(ObjectStateWrapper, "STATE_PRE_RUNNING", {value: 9, writable: false, enumerable: true, configurable: true});
module.exports = ObjectStateWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [
    {
      "type": "uint8",
      "name": "STATE_UNKNOWN",
      "value": 0
    },
    {
      "type": "uint8",
      "name": "STATE_INIT",
      "value": 1
    },
    {
      "type": "uint8",
      "name": "STATE_ARMED",
      "value": 2
    },
    {
      "type": "uint8",
      "name": "STATE_DISARMED",
      "value": 3
    },
    {
      "type": "uint8",
      "name": "STATE_RUNNING",
      "value": 4
    },
    {
      "type": "uint8",
      "name": "STATE_POSTRUN",
      "value": 5
    },
    {
      "type": "uint8",
      "name": "STATE_REMOTE_CONTROL",
      "value": 6
    },
    {
      "type": "uint8",
      "name": "STATE_ABORTING",
      "value": 7
    },
    {
      "type": "uint8",
      "name": "STATE_PRE_ARMING",
      "value": 8
    },
    {
      "type": "uint8",
      "name": "STATE_PRE_RUNNING",
      "value": 9
    }
  ],
  "fields": [
    {
      "name": "state",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "uint8",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "atos_interfaces",
    "type": "ObjectState",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "ObjectState"
}
*/
