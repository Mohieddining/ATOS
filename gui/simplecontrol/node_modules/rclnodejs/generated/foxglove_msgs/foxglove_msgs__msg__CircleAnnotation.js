// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const TimeWrapper = require('../../generated/builtin_interfaces/builtin_interfaces__msg__Time.js');
const Point2Wrapper = require('../../generated/foxglove_msgs/foxglove_msgs__msg__Point2.js');
const ColorWrapper = require('../../generated/foxglove_msgs/foxglove_msgs__msg__Color.js');
const CircleAnnotationRefStruct = StructType({
  timestamp: TimeWrapper.refObjectType,
  position: Point2Wrapper.refObjectType,
  diameter: primitiveTypes.float64,
  thickness: primitiveTypes.float64,
  fill_color: ColorWrapper.refObjectType,
  outline_color: ColorWrapper.refObjectType,
});
const CircleAnnotationRefArray = ArrayType(CircleAnnotationRefStruct);
const CircleAnnotationRefStructArray = StructType({
  data: CircleAnnotationRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class CircleAnnotationWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new CircleAnnotationRefStruct(other._refObject.toObject());
      this._wrapperFields.timestamp =  new TimeWrapper(other._wrapperFields.timestamp);
      this._wrapperFields.position =  new Point2Wrapper(other._wrapperFields.position);
      this._diameterIntialized = true;
      this._thicknessIntialized = true;
      this._wrapperFields.fill_color =  new ColorWrapper(other._wrapperFields.fill_color);
      this._wrapperFields.outline_color =  new ColorWrapper(other._wrapperFields.outline_color);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new CircleAnnotationRefStruct();
    this._wrapperFields.timestamp = new TimeWrapper();
    this._wrapperFields.position = new Point2Wrapper();
    this._diameterIntialized = false;
    this._thicknessIntialized = false;
    this._wrapperFields.fill_color = new ColorWrapper();
    this._wrapperFields.outline_color = new ColorWrapper();
  }
  static createFromRefObject(refObject) {
    let self = new CircleAnnotationWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new CircleAnnotationArrayWrapper;
  }
  static get ArrayType() {
    return CircleAnnotationArrayWrapper;
  }
  static get refObjectArrayType() {
    return CircleAnnotationRefStructArray
  }
  static get refObjectType() {
    return CircleAnnotationRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._diameterIntialized) {
        throw new TypeError('Invalid argument: diameter in CircleAnnotation');
      }
      if (!this._thicknessIntialized) {
        throw new TypeError('Invalid argument: thickness in CircleAnnotation');
      }
    }
    this._wrapperFields.timestamp.freeze(own, checkConsistency);
    this._refObject.timestamp = this._wrapperFields.timestamp.refObject;
    this._wrapperFields.position.freeze(own, checkConsistency);
    this._refObject.position = this._wrapperFields.position.refObject;
    this._wrapperFields.fill_color.freeze(own, checkConsistency);
    this._refObject.fill_color = this._wrapperFields.fill_color.refObject;
    this._wrapperFields.outline_color.freeze(own, checkConsistency);
    this._refObject.outline_color = this._wrapperFields.outline_color.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.timestamp.copyRefObject(refObject.timestamp);
    this._wrapperFields.position.copyRefObject(refObject.position);
    this._diameterIntialized = true;
    this._refObject.diameter = refObject.diameter;
    this._thicknessIntialized = true;
    this._refObject.thickness = refObject.thickness;
    this._wrapperFields.fill_color.copyRefObject(refObject.fill_color);
    this._wrapperFields.outline_color.copyRefObject(refObject.outline_color);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    TimeWrapper.freeStruct(refObject.timestamp);
    Point2Wrapper.freeStruct(refObject.position);
    ColorWrapper.freeStruct(refObject.fill_color);
    ColorWrapper.freeStruct(refObject.outline_color);
  }
  static destoryRawROS(msg) {
    CircleAnnotationWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'foxglove_msgs', subFolder: 'msg', interfaceName: 'CircleAnnotation'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get timestamp() {
    return this._wrapperFields.timestamp;
  }
  set timestamp(value) {
    if (value instanceof TimeWrapper) {
      this._wrapperFields.timestamp.copy(value);
    } else {
      this._wrapperFields.timestamp.copy(new TimeWrapper(value));
    }
  }
  get position() {
    return this._wrapperFields.position;
  }
  set position(value) {
    if (value instanceof Point2Wrapper) {
      this._wrapperFields.position.copy(value);
    } else {
      this._wrapperFields.position.copy(new Point2Wrapper(value));
    }
  }
  get diameter() {
    if (!this._diameterIntialized) {
      return undefined;
    }
    return this._refObject.diameter;
  }
  set diameter(value) {
    this._diameterIntialized = true;
    this._refObject.diameter = value;
  }
  get thickness() {
    if (!this._thicknessIntialized) {
      return undefined;
    }
    return this._refObject.thickness;
  }
  set thickness(value) {
    this._thicknessIntialized = true;
    this._refObject.thickness = value;
  }
  get fill_color() {
    return this._wrapperFields.fill_color;
  }
  set fill_color(value) {
    if (value instanceof ColorWrapper) {
      this._wrapperFields.fill_color.copy(value);
    } else {
      this._wrapperFields.fill_color.copy(new ColorWrapper(value));
    }
  }
  get outline_color() {
    return this._wrapperFields.outline_color;
  }
  set outline_color(value) {
    if (value instanceof ColorWrapper) {
      this._wrapperFields.outline_color.copy(value);
    } else {
      this._wrapperFields.outline_color.copy(new ColorWrapper(value));
    }
  }
  copyRefObject(refObject) {
    this._refObject = new CircleAnnotationRefStruct(refObject.toObject());
    this._wrapperFields.timestamp.copyRefObject(this._refObject.timestamp);
    this._wrapperFields.position.copyRefObject(this._refObject.position);
    this._diameterIntialized = true;
    this._thicknessIntialized = true;
    this._wrapperFields.fill_color.copyRefObject(this._refObject.fill_color);
    this._wrapperFields.outline_color.copyRefObject(this._refObject.outline_color);
  }
  copy(other) {
    this._refObject = new CircleAnnotationRefStruct(other._refObject.toObject());
    this._wrapperFields.timestamp.copy(other._wrapperFields.timestamp);
    this._wrapperFields.position.copy(other._wrapperFields.position);
    this._diameterIntialized = true;
    this._thicknessIntialized = true;
    this._wrapperFields.fill_color.copy(other._wrapperFields.fill_color);
    this._wrapperFields.outline_color.copy(other._wrapperFields.outline_color);
  }
  static get classType() {
    return CircleAnnotationWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"timestamp","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"builtin_interfaces","type":"Time","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"position","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"foxglove_msgs","type":"Point2","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"diameter","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"thickness","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"fill_color","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"foxglove_msgs","type":"Color","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"outline_color","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"foxglove_msgs","type":"Color","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"foxglove_msgs","type":"CircleAnnotation","stringUpperBound":null,"isPrimitiveType":false},"msgName":"CircleAnnotation"};
  }
  hasMember(name) {
    let memberNames = ["timestamp","position","diameter","thickness","fill_color","outline_color"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class CircleAnnotationArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof CircleAnnotationWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new CircleAnnotationWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to CircleAnnotationArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to CircleAnnotationArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new CircleAnnotationRefArray(size);
    this._refObject = new CircleAnnotationRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new CircleAnnotationWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof CircleAnnotationArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "CircleAnnotationArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      CircleAnnotationWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return CircleAnnotationWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return CircleAnnotationArrayWrapper;
  }
}
module.exports = CircleAnnotationWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "timestamp",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "builtin_interfaces",
        "type": "Time",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "position",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "foxglove_msgs",
        "type": "Point2",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "diameter",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "thickness",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "fill_color",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "foxglove_msgs",
        "type": "Color",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "outline_color",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "foxglove_msgs",
        "type": "Color",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "foxglove_msgs",
    "type": "CircleAnnotation",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "CircleAnnotation"
}
*/
